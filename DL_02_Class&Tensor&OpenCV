{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "DL_02 - Class & Tensor & OpenCV",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/031wnstjd/Deep-Learning/blob/master/DL_02_Class_%26_Tensor_%26_OpenCV.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y_a1Rz3nVyJh"
      },
      "source": [
        "# DL_02 - Class & Tensor & OpenCV\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MI4mr7ETdFSF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b8f12308-441e-4a90-e61f-9e05436ff608"
      },
      "source": [
        "name = input(\"Name :\")\n",
        "ID = input(\"student ID :\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Name :추준성\n",
            "student ID :2016145028\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JhUuQGmEMicu"
      },
      "source": [
        "## 실습 1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zbgV3xHZMn7Y"
      },
      "source": [
        "위에서 소개한 ```BoongUh_Master```는 한 손님 당 한 종류의 붕어빵만 주문 받을 수 있었다. </br>한 손님이 **한개 이상의 붕어빵**을 주문할 예정이다. </br>또한, 초기 시제금이 5000원이 있다.(init_money=5000로 시작)</br>주문 받을 때 마다 Master가 할 말 \"\"The money you will pay is ~~ won\"을 출력하고, 현재까지의 매출을 출력하는 Class를 만든 후 객체를 생성하여 위 예제2와 같이 동작하라.</br>_(Hint : input을 붕어빵의 종류 list와 개수를 나타내는 list로 받으시오)_"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fm5U2ughOpWA"
      },
      "source": [
        "class BoongUh_master_ver2:\n",
        "  def __init__(self):\n",
        "    self.flavor = None\n",
        "    self.price = 0\n",
        "    self.init_money = 5000\n",
        "  \n",
        "  def setting(self, flavor):\n",
        "    self.flavor = flavor\n",
        "    if self.flavor == \"red_bean\":\n",
        "      self.price = 700\n",
        "    elif self.flavor == \"custard_cream\":\n",
        "      self.price = 800\n",
        "    elif self.flavor == \"sweet_potato\":\n",
        "      self.price = 1000\n",
        "    else :\n",
        "      print(\"There is no such menu.\")\n",
        "\n",
        "  def payment(self,flavor,number):\n",
        "    if len(flavor) != len(number):\n",
        "      print(\"The number list and flavor list are different in length\")\n",
        "    else:\n",
        "      now_price = 0\n",
        "      for i in range(len(flavor)):\n",
        "        self.setting(flavor[i])\n",
        "        now_price += number[i]*self.price\n",
        "        self.init_money += number[i]*self.price\n",
        "      print(\"Master : The money you will pay is\", now_price,\"won\")\n",
        "      print(\"The sales are \", self.init_money,\"won now.\")\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ifUn91LfPaqk",
        "outputId": "6fd1f7d8-e2f1-46e9-dbe8-c284bbead188"
      },
      "source": [
        "A_master = BoongUh_master_ver2()\n",
        "A_master.payment([\"custard_cream\",\"red_bean\"],[5,2])\n",
        "A_master.payment([\"custard_cream\",\"red_bean\",\"sweet_potato\"],[7,1,2])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Master : The money you will pay is 5400 won\n",
            "The sales are  10400 won now.\n",
            "Master : The money you will pay is 8300 won\n",
            "The sales are  18700 won now.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZMbs8WIUs6U7"
      },
      "source": [
        "## 실습2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L85M-cf0tA6D"
      },
      "source": [
        "아래 함수들이 동작하는 Class를 작성하시오. (Class내의 모든 변수들은 tensor화 하시오.)\n",
        "\n",
        "```input_tensor (a)``` 값 변경 금지 </br></br>\n",
        "```function_A``` : input_tensor에 arange_base를 곱한 결과를 출력</br> 초기 arange_base는 [0,1,2,3]이고, 이 함수가 한번 호출될 때마다 arange_base에 1씩 추가 </br>([0,1,2,3] -> [1,2,3,4] -> [2,3,4,5] ->....) </br></br>\n",
        "\n",
        "```function_B``` : input_tensor와 mul_tensor를 행렬곱한 결과를 출력 </br>(mul_tensor 수정 금지)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ilnH72iBrdKo"
      },
      "source": [
        "import torch"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sKeIHGtetBm2"
      },
      "source": [
        "class TensorCalcuation:\n",
        "  def __init__(self,input_tensor):\n",
        "    self.input_tensor = input_tensor\n",
        "    self.arange_base = torch.arange(4)\n",
        "  def function_A(self):\n",
        "    sol = self.input_tensor * self.arange_base\n",
        "    print(sol)\n",
        "    self.arange_base += torch.tensor(1)\n",
        "  def function_B(self):\n",
        "    mul_tensor = torch.tensor([[1,0],[0,1]])\n",
        "    input_tensor_reshape = torch.reshape(self.input_tensor, (2,-1))\n",
        "    print(input_tensor_reshape.matmul(mul_tensor))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_3moz5vfzXdw",
        "outputId": "7aa49c8a-f1eb-4dd3-f1e7-67021c9c57cd"
      },
      "source": [
        "a = torch.tensor([20, 21, 9, 6])\n",
        "minjung = TensorCalcuation(a)\n",
        "minjung.function_A()\n",
        "minjung.function_A()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([ 0, 21, 18, 18])\n",
            "tensor([20, 42, 27, 24])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ni3Q4gvP2po2",
        "outputId": "608471ec-5b23-49d9-d420-2dd55651a2d9"
      },
      "source": [
        "minjung.function_B()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[20, 21],\n",
            "        [ 9,  6]])\n"
          ]
        }
      ]
    }
  ]
}
